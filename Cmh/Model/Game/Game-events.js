model.Game.events.onSave = function() {	// Get current user	var theUserID = sessionStorage.userID;		// Create the datetime  - wakanda save it in UTC time	var now = new Date();		// Set the current user as owner and the current date as creation date by default when the entitiy is created	if (this.isNew()) {		this.createdAt = now; // Set the date		if (theUserID !== null) // Set the user ID			this.createdBy = theUserID;			this.mainGameHost = theUserID;	}		// Set the user and date when the entity is modified	if (this.isModified()) {		this.modifiedAt = now; // Set the date		if (theUserID !== null) // Set the user ID			this.modifiedBy = theUserID;	}		// Set the user and date when the entitiy is viewed	if (this.isLoaded()) {		this.viewedAt = now; // Set the date		if (theUserID !== null) // Set the user ID			this.viewedBy = theUserID;	}};model.Game.period.events.onSet = function() {	// Set the value for the status attribute	var thisPeriod = this.period;		if (thisPeriod == 0)		this.status = "In Vorbereitung";	else if (thisPeriod > 12)		this.status = "Beendet";	else		this.status = "Spiel in Periode " + thisPeriod;};model.Game.events.onRestrictingQuery = function() {	// Create an empty entitiyCollection	var resultCollection = ds.Game.createEntityCollection();		// Current session	var currSession = currentSession();		// Whole access for admin	if (currSession.belongsTo('Admin'))		resultCollection = ds.Game.all();	else {		// Get current user		var theUserID = sessionStorage.userID;				// Query the games		if (theUserID != null) {			// Create a new entityCollection of the Game dataclass			var newGameEntityCollection = ds.Game.createEntityCollection();						// Get an entityCollection of all games the user has created and add it to the newGameEntityCollection			var gameOwners = ds.Game.query('createdBy.ID == :1',theUserID); // Query all the games the user has created			newGameEntityCollection.add(gameOwners); // Add the entity collection to the newGameEntityCollection						// Get an entityCollection of all games the user has is the firstGameHost and add it to the newGameEntityCollection			// var firstGameHost = ds.Game.query('firstGameHost.ID == :1',theUserID); // Query all the games the user has created			// newGameEntityCollection.add(firstGameHost); // Add the entity collection to the newGameEntityCollection						// Get an entityCollection of all games the user has is the firstGameHost and add it to the newGameEntityCollection			var mainGameHost = ds.Game.query('mainGameHost.ID == :1',theUserID); // Query all the games the user has created			newGameEntityCollection.add(mainGameHost); // Add the entity collection to the newGameEntityCollection						// Get an entityCollection of all games the user has participated as gamer			var gamerGames = ds.Game.query('gamer.user.ID == :1', theUserID);			newGameEntityCollection.add(gamerGames); // Add the entity collection to the newGameEntityCollection						// Return the entity collection newGameEntityCollection			resultCollection = newGameEntityCollection;		}	}		// Return the entityCollection	return resultCollection;};model.Game.gameInfo.onGet = function() {	// Initialize Infostring	var expr = "";	var myUser = currentUser();	var userStorage = myUser.storage;	var lang = userStorage["language"];	switch(lang) {			case "de":				expr = "Spielleiter: " + this.mainGameHostFullName + " Spielstatus: " + this.status;				break;			case "en":				expr = "Gamehost: " + this.mainGameHostFullName + " Game state: " + this.status;				break;	}	return expr;};